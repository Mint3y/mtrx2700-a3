
UART_Task_d.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000044c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005e0  080005e0  0000202c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005e0  080005e0  0000202c  2**0
                  CONTENTS
  4 .ARM          00000000  080005e0  080005e0  0000202c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005e0  080005e0  0000202c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005e0  080005e0  000015e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005e4  080005e4  000015e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  080005e8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000202c  2**0
                  CONTENTS
 10 .bss          00000150  2000002c  2000002c  0000202c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000017c  2000017c  0000202c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000202c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000dca  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000042c  00000000  00000000  00002e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a8  00000000  00000000  00003258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000006c  00000000  00000000  00003300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014e47  00000000  00000000  0000336c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000fe0  00000000  00000000  000181b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00072841  00000000  00000000  00019193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008b9d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000158  00000000  00000000  0008ba18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0008bb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000002c 	.word	0x2000002c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080005c8 	.word	0x080005c8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000030 	.word	0x20000030
 80001d0:	080005c8 	.word	0x080005c8

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	@ (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	@ (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <finished_transmission>:
uint8_t transmit_index = 0;                // Buffer position
uint8_t transmit_length = 0;               // Total number of characters
uint8_t is_transmitting = 0;               // Variable to track whether we are transmitting


void finished_transmission(uint8_t *user_buffer, uint32_t message_length) {
 8000264:	b480      	push	{r7}
 8000266:	b085      	sub	sp, #20
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
 800026c:	6039      	str	r1, [r7, #0]
    user_buffer[message_length] = '\0';  // Null terminate
 800026e:	687a      	ldr	r2, [r7, #4]
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	4413      	add	r3, r2
 8000274:	2200      	movs	r2, #0
 8000276:	701a      	strb	r2, [r3, #0]
    // Copy the message into the transmit buffer
    for (uint32_t i = 0; i <= message_length; i++) {
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
 800027c:	e00b      	b.n	8000296 <finished_transmission+0x32>
        transmit_buffer[i] = user_buffer[i];
 800027e:	687a      	ldr	r2, [r7, #4]
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	4413      	add	r3, r2
 8000284:	7819      	ldrb	r1, [r3, #0]
 8000286:	4a11      	ldr	r2, [pc, #68]	@ (80002cc <finished_transmission+0x68>)
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	4413      	add	r3, r2
 800028c:	460a      	mov	r2, r1
 800028e:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i <= message_length; i++) {
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	3301      	adds	r3, #1
 8000294:	60fb      	str	r3, [r7, #12]
 8000296:	68fa      	ldr	r2, [r7, #12]
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	429a      	cmp	r2, r3
 800029c:	d9ef      	bls.n	800027e <finished_transmission+0x1a>
    }
    transmit_length = message_length;  // Set how many characters to send
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	b2da      	uxtb	r2, r3
 80002a2:	4b0b      	ldr	r3, [pc, #44]	@ (80002d0 <finished_transmission+0x6c>)
 80002a4:	701a      	strb	r2, [r3, #0]
    transmit_index = 0;                // Start from beginning
 80002a6:	4b0b      	ldr	r3, [pc, #44]	@ (80002d4 <finished_transmission+0x70>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	701a      	strb	r2, [r3, #0]
    is_transmitting = 1;               // Set transmit mode
 80002ac:	4b0a      	ldr	r3, [pc, #40]	@ (80002d8 <finished_transmission+0x74>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	701a      	strb	r2, [r3, #0]

    USART1->CR1 |= USART_CR1_TXEIE;    // Enable transmit interrupt to start sending
 80002b2:	4b0a      	ldr	r3, [pc, #40]	@ (80002dc <finished_transmission+0x78>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a09      	ldr	r2, [pc, #36]	@ (80002dc <finished_transmission+0x78>)
 80002b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002bc:	6013      	str	r3, [r2, #0]
}
 80002be:	bf00      	nop
 80002c0:	3714      	adds	r7, #20
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	20000114 	.word	0x20000114
 80002d0:	20000179 	.word	0x20000179
 80002d4:	20000178 	.word	0x20000178
 80002d8:	2000017a 	.word	0x2000017a
 80002dc:	40013800 	.word	0x40013800

080002e0 <USART1_EXTI25_IRQHandler>:

void USART1_EXTI25_IRQHandler(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
    if (USART1->ISR & USART_ISR_RXNE) {  // Check if data has been received
 80002e6:	4b35      	ldr	r3, [pc, #212]	@ (80003bc <USART1_EXTI25_IRQHandler+0xdc>)
 80002e8:	69db      	ldr	r3, [r3, #28]
 80002ea:	f003 0320 	and.w	r3, r3, #32
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d03a      	beq.n	8000368 <USART1_EXTI25_IRQHandler+0x88>
        uint8_t incoming_byte = USART1->RDR;  // Read the character
 80002f2:	4b32      	ldr	r3, [pc, #200]	@ (80003bc <USART1_EXTI25_IRQHandler+0xdc>)
 80002f4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80002f6:	b29b      	uxth	r3, r3
 80002f8:	71fb      	strb	r3, [r7, #7]

        // Check for buffer overflow
        if (kernel_index < MESSAGE_LENGTH - 1) {
 80002fa:	4b31      	ldr	r3, [pc, #196]	@ (80003c0 <USART1_EXTI25_IRQHandler+0xe0>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	2b62      	cmp	r3, #98	@ 0x62
 8000300:	d82f      	bhi.n	8000362 <USART1_EXTI25_IRQHandler+0x82>
            // Store character in current buffer
            kernel_buffer[active_kernel][kernel_index++] = incoming_byte;
 8000302:	4b30      	ldr	r3, [pc, #192]	@ (80003c4 <USART1_EXTI25_IRQHandler+0xe4>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	4618      	mov	r0, r3
 8000308:	4b2d      	ldr	r3, [pc, #180]	@ (80003c0 <USART1_EXTI25_IRQHandler+0xe0>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	1c5a      	adds	r2, r3, #1
 800030e:	b2d1      	uxtb	r1, r2
 8000310:	4a2b      	ldr	r2, [pc, #172]	@ (80003c0 <USART1_EXTI25_IRQHandler+0xe0>)
 8000312:	7011      	strb	r1, [r2, #0]
 8000314:	4619      	mov	r1, r3
 8000316:	4a2c      	ldr	r2, [pc, #176]	@ (80003c8 <USART1_EXTI25_IRQHandler+0xe8>)
 8000318:	2364      	movs	r3, #100	@ 0x64
 800031a:	fb00 f303 	mul.w	r3, r0, r3
 800031e:	4413      	add	r3, r2
 8000320:	440b      	add	r3, r1
 8000322:	79fa      	ldrb	r2, [r7, #7]
 8000324:	701a      	strb	r2, [r3, #0]

            // Check if terminating character
            if (incoming_byte == message_terminator) {
 8000326:	4b29      	ldr	r3, [pc, #164]	@ (80003cc <USART1_EXTI25_IRQHandler+0xec>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	79fa      	ldrb	r2, [r7, #7]
 800032c:	429a      	cmp	r2, r3
 800032e:	d11b      	bne.n	8000368 <USART1_EXTI25_IRQHandler+0x88>
                // Callback function
                finished_transmission(kernel_buffer[active_kernel], kernel_index);
 8000330:	4b24      	ldr	r3, [pc, #144]	@ (80003c4 <USART1_EXTI25_IRQHandler+0xe4>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	461a      	mov	r2, r3
 8000336:	2364      	movs	r3, #100	@ 0x64
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	4a22      	ldr	r2, [pc, #136]	@ (80003c8 <USART1_EXTI25_IRQHandler+0xe8>)
 800033e:	4413      	add	r3, r2
 8000340:	4a1f      	ldr	r2, [pc, #124]	@ (80003c0 <USART1_EXTI25_IRQHandler+0xe0>)
 8000342:	7812      	ldrb	r2, [r2, #0]
 8000344:	4611      	mov	r1, r2
 8000346:	4618      	mov	r0, r3
 8000348:	f7ff ff8c 	bl	8000264 <finished_transmission>

                // Switch to the other buffer for the next message
                active_kernel ^= 1;
 800034c:	4b1d      	ldr	r3, [pc, #116]	@ (80003c4 <USART1_EXTI25_IRQHandler+0xe4>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	f083 0301 	eor.w	r3, r3, #1
 8000354:	b2da      	uxtb	r2, r3
 8000356:	4b1b      	ldr	r3, [pc, #108]	@ (80003c4 <USART1_EXTI25_IRQHandler+0xe4>)
 8000358:	701a      	strb	r2, [r3, #0]

                // Reset index for the new message
                kernel_index = 0;
 800035a:	4b19      	ldr	r3, [pc, #100]	@ (80003c0 <USART1_EXTI25_IRQHandler+0xe0>)
 800035c:	2200      	movs	r2, #0
 800035e:	701a      	strb	r2, [r3, #0]
 8000360:	e002      	b.n	8000368 <USART1_EXTI25_IRQHandler+0x88>
            }
        } else {
            // Reset buffer if overflow
            kernel_index = 0;
 8000362:	4b17      	ldr	r3, [pc, #92]	@ (80003c0 <USART1_EXTI25_IRQHandler+0xe0>)
 8000364:	2200      	movs	r2, #0
 8000366:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check if ready to send the next character and currently transmitting
    if ((USART1->ISR & USART_ISR_TXE) && is_transmitting) {
 8000368:	4b14      	ldr	r3, [pc, #80]	@ (80003bc <USART1_EXTI25_IRQHandler+0xdc>)
 800036a:	69db      	ldr	r3, [r3, #28]
 800036c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000370:	2b00      	cmp	r3, #0
 8000372:	d01e      	beq.n	80003b2 <USART1_EXTI25_IRQHandler+0xd2>
 8000374:	4b16      	ldr	r3, [pc, #88]	@ (80003d0 <USART1_EXTI25_IRQHandler+0xf0>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d01a      	beq.n	80003b2 <USART1_EXTI25_IRQHandler+0xd2>
        if (transmit_index < transmit_length) {
 800037c:	4b15      	ldr	r3, [pc, #84]	@ (80003d4 <USART1_EXTI25_IRQHandler+0xf4>)
 800037e:	781a      	ldrb	r2, [r3, #0]
 8000380:	4b15      	ldr	r3, [pc, #84]	@ (80003d8 <USART1_EXTI25_IRQHandler+0xf8>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	429a      	cmp	r2, r3
 8000386:	d20b      	bcs.n	80003a0 <USART1_EXTI25_IRQHandler+0xc0>
            USART1->TDR = transmit_buffer[transmit_index++];  // Send next character
 8000388:	4b12      	ldr	r3, [pc, #72]	@ (80003d4 <USART1_EXTI25_IRQHandler+0xf4>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	1c5a      	adds	r2, r3, #1
 800038e:	b2d1      	uxtb	r1, r2
 8000390:	4a10      	ldr	r2, [pc, #64]	@ (80003d4 <USART1_EXTI25_IRQHandler+0xf4>)
 8000392:	7011      	strb	r1, [r2, #0]
 8000394:	461a      	mov	r2, r3
 8000396:	4b11      	ldr	r3, [pc, #68]	@ (80003dc <USART1_EXTI25_IRQHandler+0xfc>)
 8000398:	5c9a      	ldrb	r2, [r3, r2]
 800039a:	4b08      	ldr	r3, [pc, #32]	@ (80003bc <USART1_EXTI25_IRQHandler+0xdc>)
 800039c:	851a      	strh	r2, [r3, #40]	@ 0x28
        } else {
            USART1->CR1 &= ~USART_CR1_TXEIE;  // Stop TX interrupt
            is_transmitting = 0;              // Stop transmit mode
        }
    }
}
 800039e:	e008      	b.n	80003b2 <USART1_EXTI25_IRQHandler+0xd2>
            USART1->CR1 &= ~USART_CR1_TXEIE;  // Stop TX interrupt
 80003a0:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <USART1_EXTI25_IRQHandler+0xdc>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a05      	ldr	r2, [pc, #20]	@ (80003bc <USART1_EXTI25_IRQHandler+0xdc>)
 80003a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80003aa:	6013      	str	r3, [r2, #0]
            is_transmitting = 0;              // Stop transmit mode
 80003ac:	4b08      	ldr	r3, [pc, #32]	@ (80003d0 <USART1_EXTI25_IRQHandler+0xf0>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	701a      	strb	r2, [r3, #0]
}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40013800 	.word	0x40013800
 80003c0:	20000111 	.word	0x20000111
 80003c4:	20000110 	.word	0x20000110
 80003c8:	20000048 	.word	0x20000048
 80003cc:	20000000 	.word	0x20000000
 80003d0:	2000017a 	.word	0x2000017a
 80003d4:	20000178 	.word	0x20000178
 80003d8:	20000179 	.word	0x20000179
 80003dc:	20000114 	.word	0x20000114

080003e0 <enable_interrupt>:

void enable_interrupt() {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e4:	b672      	cpsid	i
}
 80003e6:	bf00      	nop
    __disable_irq();  // Disable interrupts

    USART1->CR1 |= USART_CR1_RXNEIE;      // Enable RX interrupt
 80003e8:	4b08      	ldr	r3, [pc, #32]	@ (800040c <enable_interrupt+0x2c>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a07      	ldr	r2, [pc, #28]	@ (800040c <enable_interrupt+0x2c>)
 80003ee:	f043 0320 	orr.w	r3, r3, #32
 80003f2:	6013      	str	r3, [r2, #0]
    NVIC_SetPriority(USART1_IRQn, 1);     // Set priority for USART1 interrupt
 80003f4:	2101      	movs	r1, #1
 80003f6:	2025      	movs	r0, #37	@ 0x25
 80003f8:	f7ff ff0a 	bl	8000210 <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART1_IRQn);          // Enable USART1 interrupt in NVIC
 80003fc:	2025      	movs	r0, #37	@ 0x25
 80003fe:	f7ff fee9 	bl	80001d4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000402:	b662      	cpsie	i
}
 8000404:	bf00      	nop

    __enable_irq();   // Re-enable interrupts
}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40013800 	.word	0x40013800

08000410 <main>:
#include "serial.h"
#include "interrupt.h"
#include "stm32f303xc.h"

int main(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
    SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);  // Initialise USART1
 8000414:	2200      	movs	r2, #0
 8000416:	4904      	ldr	r1, [pc, #16]	@ (8000428 <main+0x18>)
 8000418:	2004      	movs	r0, #4
 800041a:	f000 f807 	bl	800042c <SerialInitialise>
    enable_interrupt();                                 // Enable interrupts
 800041e:	f7ff ffdf 	bl	80003e0 <enable_interrupt>

    for (;;); // Infinite loop
 8000422:	bf00      	nop
 8000424:	e7fd      	b.n	8000422 <main+0x12>
 8000426:	bf00      	nop
 8000428:	20000004 	.word	0x20000004

0800042c <SerialInitialise>:
		};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint8_t *, uint32_t)) {
 800042c:	b480      	push	{r7}
 800042e:	b087      	sub	sp, #28
 8000430:	af00      	add	r7, sp, #0
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	60b9      	str	r1, [r7, #8]
 8000436:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800043e:	4b3a      	ldr	r3, [pc, #232]	@ (8000528 <SerialInitialise+0xfc>)
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	4a39      	ldr	r2, [pc, #228]	@ (8000528 <SerialInitialise+0xfc>)
 8000444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000448:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800044a:	4b37      	ldr	r3, [pc, #220]	@ (8000528 <SerialInitialise+0xfc>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	4a36      	ldr	r2, [pc, #216]	@ (8000528 <SerialInitialise+0xfc>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	691a      	ldr	r2, [r3, #16]
 800045a:	4b33      	ldr	r3, [pc, #204]	@ (8000528 <SerialInitialise+0xfc>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	4932      	ldr	r1, [pc, #200]	@ (8000528 <SerialInitialise+0xfc>)
 8000460:	4313      	orrs	r3, r2
 8000462:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	68ba      	ldr	r2, [r7, #8]
 800046a:	6952      	ldr	r2, [r2, #20]
 800046c:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	68ba      	ldr	r2, [r7, #8]
 8000474:	6992      	ldr	r2, [r2, #24]
 8000476:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	69d9      	ldr	r1, [r3, #28]
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	6a1a      	ldr	r2, [r3, #32]
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	430a      	orrs	r2, r1
 8000488:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	6a19      	ldr	r1, [r3, #32]
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	430a      	orrs	r2, r1
 800049a:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	68da      	ldr	r2, [r3, #12]
 80004a0:	4b21      	ldr	r3, [pc, #132]	@ (8000528 <SerialInitialise+0xfc>)
 80004a2:	69db      	ldr	r3, [r3, #28]
 80004a4:	4920      	ldr	r1, [pc, #128]	@ (8000528 <SerialInitialise+0xfc>)
 80004a6:	4313      	orrs	r3, r2
 80004a8:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	689a      	ldr	r2, [r3, #8]
 80004ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000528 <SerialInitialise+0xfc>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	491d      	ldr	r1, [pc, #116]	@ (8000528 <SerialInitialise+0xfc>)
 80004b4:	4313      	orrs	r3, r2
 80004b6:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	330c      	adds	r3, #12
 80004be:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	2b04      	cmp	r3, #4
 80004c4:	d822      	bhi.n	800050c <SerialInitialise+0xe0>
 80004c6:	a201      	add	r2, pc, #4	@ (adr r2, 80004cc <SerialInitialise+0xa0>)
 80004c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004cc:	080004e1 	.word	0x080004e1
 80004d0:	080004eb 	.word	0x080004eb
 80004d4:	080004f5 	.word	0x080004f5
 80004d8:	080004fd 	.word	0x080004fd
 80004dc:	08000505 	.word	0x08000505
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x341;  // 115200 at 8MHz
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	f240 3241 	movw	r2, #833	@ 0x341
 80004e6:	801a      	strh	r2, [r3, #0]
		break;
 80004e8:	e010      	b.n	800050c <SerialInitialise+0xe0>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x1A1;  // 115200 at 8MHz
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	f240 12a1 	movw	r2, #417	@ 0x1a1
 80004f0:	801a      	strh	r2, [r3, #0]
		break;
 80004f2:	e00b      	b.n	800050c <SerialInitialise+0xe0>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0xD0;  // 115200 at 8MHz
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	22d0      	movs	r2, #208	@ 0xd0
 80004f8:	801a      	strh	r2, [r3, #0]
		break;
 80004fa:	e007      	b.n	800050c <SerialInitialise+0xe0>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x8B;  // 115200 at 8MHz
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	228b      	movs	r2, #139	@ 0x8b
 8000500:	801a      	strh	r2, [r3, #0]
		break;
 8000502:	e003      	b.n	800050c <SerialInitialise+0xe0>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	2246      	movs	r2, #70	@ 0x46
 8000508:	801a      	strh	r2, [r3, #0]
		break;
 800050a:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f042 020d 	orr.w	r2, r2, #13
 800051a:	601a      	str	r2, [r3, #0]
}
 800051c:	bf00      	nop
 800051e:	371c      	adds	r7, #28
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	40021000 	.word	0x40021000

0800052c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800052c:	480d      	ldr	r0, [pc, #52]	@ (8000564 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800052e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000530:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000534:	480c      	ldr	r0, [pc, #48]	@ (8000568 <LoopForever+0x6>)
  ldr r1, =_edata
 8000536:	490d      	ldr	r1, [pc, #52]	@ (800056c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000538:	4a0d      	ldr	r2, [pc, #52]	@ (8000570 <LoopForever+0xe>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800053c:	e002      	b.n	8000544 <LoopCopyDataInit>

0800053e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000542:	3304      	adds	r3, #4

08000544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000548:	d3f9      	bcc.n	800053e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054a:	4a0a      	ldr	r2, [pc, #40]	@ (8000574 <LoopForever+0x12>)
  ldr r4, =_ebss
 800054c:	4c0a      	ldr	r4, [pc, #40]	@ (8000578 <LoopForever+0x16>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000550:	e001      	b.n	8000556 <LoopFillZerobss>

08000552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000554:	3204      	adds	r2, #4

08000556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000558:	d3fb      	bcc.n	8000552 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800055a:	f000 f811 	bl	8000580 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055e:	f7ff ff57 	bl	8000410 <main>

08000562 <LoopForever>:

LoopForever:
  b LoopForever
 8000562:	e7fe      	b.n	8000562 <LoopForever>
  ldr   r0, =_estack
 8000564:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800056c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000570:	080005e8 	.word	0x080005e8
  ldr r2, =_sbss
 8000574:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000578:	2000017c 	.word	0x2000017c

0800057c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800057c:	e7fe      	b.n	800057c <ADC1_2_IRQHandler>
	...

08000580 <__libc_init_array>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	4d0d      	ldr	r5, [pc, #52]	@ (80005b8 <__libc_init_array+0x38>)
 8000584:	4c0d      	ldr	r4, [pc, #52]	@ (80005bc <__libc_init_array+0x3c>)
 8000586:	1b64      	subs	r4, r4, r5
 8000588:	10a4      	asrs	r4, r4, #2
 800058a:	2600      	movs	r6, #0
 800058c:	42a6      	cmp	r6, r4
 800058e:	d109      	bne.n	80005a4 <__libc_init_array+0x24>
 8000590:	4d0b      	ldr	r5, [pc, #44]	@ (80005c0 <__libc_init_array+0x40>)
 8000592:	4c0c      	ldr	r4, [pc, #48]	@ (80005c4 <__libc_init_array+0x44>)
 8000594:	f000 f818 	bl	80005c8 <_init>
 8000598:	1b64      	subs	r4, r4, r5
 800059a:	10a4      	asrs	r4, r4, #2
 800059c:	2600      	movs	r6, #0
 800059e:	42a6      	cmp	r6, r4
 80005a0:	d105      	bne.n	80005ae <__libc_init_array+0x2e>
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80005a8:	4798      	blx	r3
 80005aa:	3601      	adds	r6, #1
 80005ac:	e7ee      	b.n	800058c <__libc_init_array+0xc>
 80005ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80005b2:	4798      	blx	r3
 80005b4:	3601      	adds	r6, #1
 80005b6:	e7f2      	b.n	800059e <__libc_init_array+0x1e>
 80005b8:	080005e0 	.word	0x080005e0
 80005bc:	080005e0 	.word	0x080005e0
 80005c0:	080005e0 	.word	0x080005e0
 80005c4:	080005e4 	.word	0x080005e4

080005c8 <_init>:
 80005c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ca:	bf00      	nop
 80005cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ce:	bc08      	pop	{r3}
 80005d0:	469e      	mov	lr, r3
 80005d2:	4770      	bx	lr

080005d4 <_fini>:
 80005d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d6:	bf00      	nop
 80005d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005da:	bc08      	pop	{r3}
 80005dc:	469e      	mov	lr, r3
 80005de:	4770      	bx	lr
